<% require 'ostruct' %>
<%= form_with(model: [campaign, form_builder, element], class: "space-y-6", data: { turbo: false }) do |form| %>
  <% if element.errors.any? %>
    <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">There <%= element.errors.count == 1 ? 'is' : 'are' %> <%= pluralize(element.errors.count, "error") %> with this form:</h3>
          <ul class="mt-2 text-sm text-red-700 list-disc list-inside">
            <% element.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow rounded-lg overflow-hidden">
    <div class="p-6 border-b border-gray-200">
      <h3 class="text-lg font-medium leading-6 text-gray-900">Element Details</h3>
      <p class="mt-1 text-sm text-gray-500">Configure your form element</p>
    </div>
    
    <div class="p-6 space-y-6">
      <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
        <div>
          <%= form.label :element_type, "Element Type", class: "block text-sm font-medium text-gray-700" %>
          <%= form.select :element_type, @element_types.map { |t| [t.humanize, t] }, {}, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm", data: { controller: "element-type" } %>
        </div>

        <div data-element-type-target="campaignFieldContainer" class="<%= 'hidden' unless %w[text textarea number email phone date select checkbox radio].include?(element.element_type) %>">
          <%= form.label :campaign_field_id, "Campaign Field", class: "block text-sm font-medium text-gray-700" %>
          <%= form.select :campaign_field_id, @campaign_fields.map { |f| [f.label, f.id] }, { include_blank: "No field (custom)" }, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
          <p class="mt-1 text-xs text-gray-500">Link to a campaign field to inherit validation rules</p>
        </div>
      </div>

      <!-- Common properties for all field types -->
      <div data-element-type-target="generalProperties">
        <div class="mt-4">
          <%= form.label :position, class: "block text-sm font-medium text-gray-700" %>
          <%= form.number_field :position, min: 0, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
          <p class="mt-1 text-xs text-gray-500">Element order in the form (0 = first)</p>
        </div>
      </div>

      <!-- Text, Textarea, Email, Phone, Number field properties -->
      <div data-element-type-target="inputProperties" class="<%= 'hidden' unless %w[text textarea email phone number].include?(element.element_type) %>">
        <div class="mt-4">
          <%= form.fields_for :properties, OpenStruct.new(element.properties || {}) do |props| %>
            <div>
              <%= props.label :label, class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_field :label, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
            </div>

            <div class="mt-4">
              <%= props.label :placeholder, class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_field :placeholder, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
            </div>

            <div class="mt-4">
              <%= props.label :help_text, "Help Text", class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_area :help_text, rows: 2, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
            </div>

            <div class="mt-4">
              <div class="flex items-start">
                <div class="flex items-center h-5">
                  <%= props.check_box :required, class: "focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded" %>
                </div>
                <div class="ml-3 text-sm">
                  <%= props.label :required, class: "font-medium text-gray-700" %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Header, Paragraph properties -->
      <div data-element-type-target="contentProperties" class="<%= 'hidden' unless %w[header paragraph].include?(element.element_type) %>">
        <div class="mt-4">
          <%= form.fields_for :properties, OpenStruct.new(element.properties || {}) do |props| %>
            <div>
              <%= props.label :content, class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_area :content, rows: 5, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
              <p class="mt-1 text-xs text-gray-500">HTML is allowed for formatting</p>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Checkbox, Consent properties -->
      <div data-element-type-target="checkboxProperties" class="<%= 'hidden' unless %w[checkbox consent].include?(element.element_type) %>">
        <div class="mt-4">
          <%= form.fields_for :properties, OpenStruct.new(element.properties || {}) do |props| %>
            <div>
              <%= props.label element.element_type == 'consent' ? :content : :label, class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_area element.element_type == 'consent' ? :content : :label, rows: 3, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
              <% if element.element_type == 'consent' %>
                <p class="mt-1 text-xs text-gray-500">The text shown alongside the consent checkbox</p>
              <% end %>
            </div>

            <div class="mt-4">
              <div class="flex items-start">
                <div class="flex items-center h-5">
                  <%= props.check_box :required, class: "focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded" %>
                </div>
                <div class="ml-3 text-sm">
                  <%= props.label :required, class: "font-medium text-gray-700" %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Submit button properties -->
      <div data-element-type-target="submitProperties" class="<%= 'hidden' unless element.element_type == 'submit' %>">
        <div class="mt-4">
          <%= form.fields_for :properties, OpenStruct.new(element.properties || {}) do |props| %>
            <div>
              <%= props.label :text, "Button Text", class: "block text-sm font-medium text-gray-700" %>
              <%= props.text_field :text, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
            </div>

            <div class="mt-4">
              <%= props.label :alignment, class: "block text-sm font-medium text-gray-700" %>
              <%= props.select :alignment, [["Left", "left"], ["Center", "center"], ["Right", "right"]], { selected: props.object.alignment || "center" }, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Conditional display logic -->
      <div class="mt-6 pt-6 border-t border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Conditional Display</h3>
        <p class="text-sm text-gray-500">Optionally show this element based on another field's value</p>
        
        <div class="mt-4">
          <%= form.label :display_condition_element_id, "Show when field", class: "block text-sm font-medium text-gray-700" %>
          <%= form.select :display_condition_element_id, form_builder.elements.where(element_type: %w[text textarea number email phone select checkbox radio]).map { |e| ["#{e.element_type.humanize}: #{e.properties['label']}", e.id] }, { include_blank: "Always show" }, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
        </div>
        
        <div class="mt-4 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
          <div class="sm:col-span-2">
            <%= form.label :display_condition_operator, "Operator", class: "block text-sm font-medium text-gray-700" %>
            <%= form.select :display_condition_operator, [["equals", "equals"], ["not equals", "not_equals"], ["contains", "contains"], ["starts with", "starts_with"], ["ends with", "ends_with"], ["is empty", "is_empty"], ["is not empty", "is_not_empty"], ["greater than", "greater_than"], ["less than", "less_than"]], { include_blank: true }, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
          </div>
          
          <div class="sm:col-span-4">
            <%= form.label :display_condition_value, "Value", class: "block text-sm font-medium text-gray-700" %>
            <%= form.text_field :display_condition_value, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="flex justify-end">
    <%= link_to "Cancel", campaign_form_builder_path(campaign, form_builder), class: "btn btn-white mr-2" %>
    <%= form.submit class: "btn btn-primary" %>
  </div>
<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const elementTypeSelect = document.querySelector('[data-controller="element-type"]');
    const campaignFieldContainer = document.querySelector('[data-element-type-target="campaignFieldContainer"]');
    const inputProperties = document.querySelector('[data-element-type-target="inputProperties"]');
    const contentProperties = document.querySelector('[data-element-type-target="contentProperties"]');
    const checkboxProperties = document.querySelector('[data-element-type-target="checkboxProperties"]');
    const submitProperties = document.querySelector('[data-element-type-target="submitProperties"]');
    
    elementTypeSelect.addEventListener("change", function(event) {
      const elementType = event.target.value;
      
      // Show/hide campaign field selection based on element type
      if (['text', 'textarea', 'number', 'email', 'phone', 'date', 'select', 'checkbox', 'radio'].includes(elementType)) {
        campaignFieldContainer.classList.remove('hidden');
      } else {
        campaignFieldContainer.classList.add('hidden');
      }
      
      // Show/hide properties sections based on element type
      if (['text', 'textarea', 'email', 'phone', 'number', 'date', 'select', 'radio'].includes(elementType)) {
        inputProperties.classList.remove('hidden');
        contentProperties.classList.add('hidden');
        checkboxProperties.classList.add('hidden');
        submitProperties.classList.add('hidden');
      } else if (['header', 'paragraph'].includes(elementType)) {
        inputProperties.classList.add('hidden');
        contentProperties.classList.remove('hidden');
        checkboxProperties.classList.add('hidden');
        submitProperties.classList.add('hidden');
      } else if (['checkbox', 'consent'].includes(elementType)) {
        inputProperties.classList.add('hidden');
        contentProperties.classList.add('hidden');
        checkboxProperties.classList.remove('hidden');
        submitProperties.classList.add('hidden');
      } else if (elementType === 'submit') {
        inputProperties.classList.add('hidden');
        contentProperties.classList.add('hidden');
        checkboxProperties.classList.add('hidden');
        submitProperties.classList.remove('hidden');
      } else {
        inputProperties.classList.add('hidden');
        contentProperties.classList.add('hidden');
        checkboxProperties.classList.add('hidden');
        submitProperties.classList.add('hidden');
      }
    });
  });
</script>