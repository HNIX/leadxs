<div class="container mx-auto px-4 py-8">
  <!-- Dashboard Header -->
  <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6">
    <div>
      <h1 class="text-2xl font-bold mb-2">Campaign Performance Dashboard</h1>
      <p class="text-gray-500 dark:text-gray-400">
        <%= @selected_campaign ? "Campaign: #{@selected_campaign.name}" : "All Campaigns" %>
        â€¢ <%= "#{@start_date.strftime('%b %d, %Y')} - #{@end_date.strftime('%b %d, %Y')}" %>
      </p>
    </div>
    
    <!-- Filter Controls -->
    <div class="mt-4 md:mt-0">
      <button type="button" id="filterToggleBtn" class="btn btn-outline btn-sm flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
        </svg>
        Filters
      </button>
    </div>
  </div>
  
  <!-- Filter Panel -->
  <div id="filterPanel" class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6 <%= params[:campaign_id].present? || params[:source_id].present? || params[:start_date].present? ? '' : 'hidden' %>">
    <%= form_with url: campaign_dashboard_path, method: :get, data: { controller: "filter" }, class: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4" do |f| %>
      <!-- Campaign Filter -->
      <div>
        <%= f.label :campaign_id, "Campaign", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
        <%= f.select :campaign_id, 
                     options_for_select([["All Campaigns", ""]] + @campaigns.map { |c| [c.name, c.id] }, params[:campaign_id]), 
                     {}, 
                     { class: "select select-bordered w-full" } %>
      </div>
      
      <!-- Source Filter - Temporarily disabled until we can properly filter by source -->
      <!--
      <div>
        <%= f.label :source_id, "Source", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
        <%= f.select :source_id, 
                     options_for_select([["All Sources", ""]] + current_account.sources.map { |s| [s.name, s.id] }, params[:source_id]), 
                     {}, 
                     { class: "select select-bordered w-full" } %>
      </div>
      -->
      
      <!-- Period Type -->
      <div>
        <%= f.label :period_type, "Time Grouping", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
        <%= f.select :period_type, 
                     options_for_select(period_options_for_select, params[:period_type] || 'daily'), 
                     {}, 
                     { class: "select select-bordered w-full" } %>
      </div>
      
      <!-- Date Range -->
      <div>
        <%= f.label :date_preset, "Date Range", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
        <%= f.select :date_preset, 
                     options_for_select(date_preset_options, params[:date_preset] || 30), 
                     {}, 
                     { class: "select select-bordered w-full", data: { action: "change->filter#toggleCustomDateRange" } } %>
      </div>
      
      <!-- Custom Date Range Fields (initially hidden) -->
      <div id="customDateRange" class="<%= params[:date_preset] == 'custom' ? '' : 'hidden' %> flex space-x-2">
        <div class="w-1/2">
          <%= f.label :start_date, "Start Date", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
          <%= f.date_field :start_date, value: params[:start_date] || @start_date.strftime('%Y-%m-%d'), class: "input input-bordered w-full" %>
        </div>
        <div class="w-1/2">
          <%= f.label :end_date, "End Date", class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" %>
          <%= f.date_field :end_date, value: params[:end_date] || @end_date.strftime('%Y-%m-%d'), class: "input input-bordered w-full" %>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="flex items-end space-x-4 col-span-1 md:col-span-2 lg:col-span-5 mt-4">
        <%= f.submit "Apply Filters", class: "btn btn-primary btn-sm" %>
        <%= link_to "Reset Filters", campaign_dashboard_path, class: "btn btn-outline btn-sm" %>
      </div>
    <% end %>
  </div>
  
  <!-- Sample Data Link in Development -->
  <% if Rails.env.development? %>
    <div class="bg-blue-100 dark:bg-blue-800 p-4 rounded mb-4 flex items-center justify-between">
      <p class="text-sm">No data available? Try loading sample data for testing:</p>
      <a href="<%= campaign_dashboard_path(sample_data: true) %>" class="btn btn-sm btn-primary">Load Sample Data</a>
    </div>
  <% end %>

  <!-- Summary Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Direct HTML Lead Volume Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Lead Volume</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_with_delimiter(@total_bids) %></h3>
            <% if @total_bids_change.present? %>
              <span class="ml-2 text-sm font-medium <%= @total_bids_change >= 0 ? 'text-green-500' : 'text-red-500' %>">
                <%= @total_bids_change >= 0 ? '+' : '' %><%= number_to_percentage(@total_bids_change, precision: 1) %>
              </span>
            <% end %>
          </div>
        </div>
        <div class="p-2 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML Acceptance Rate Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Acceptance Rate</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_percentage(@acceptance_rate, precision: 1) %></h3>
            <% if @acceptance_rate_change.present? %>
              <span class="ml-2 text-sm font-medium <%= @acceptance_rate_change >= 0 ? 'text-green-500' : 'text-red-500' %>">
                <%= @acceptance_rate_change >= 0 ? '+' : '' %><%= number_to_percentage(@acceptance_rate_change.abs, precision: 1) %>
              </span>
            <% end %>
          </div>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Qualified leads accepted</p>
        </div>
        <div class="p-2 rounded-full bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML Revenue Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Revenue</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_currency(@total_revenue) %></h3>
            <% if @total_revenue_change.present? %>
              <span class="ml-2 text-sm font-medium <%= @total_revenue_change >= 0 ? 'text-green-500' : 'text-red-500' %>">
                <%= @total_revenue_change >= 0 ? '+' : '' %><%= number_to_percentage(@total_revenue_change.abs, precision: 1) %>
              </span>
            <% end %>
          </div>
        </div>
        <div class="p-2 rounded-full bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML Profit Margin Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Profit Margin</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_percentage(@profit_margin, precision: 1) %></h3>
          </div>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Average profit per lead</p>
        </div>
        <div class="p-2 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Advanced Metrics Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Direct HTML Average Bid Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Average Bid</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_currency(@avg_bid_amount) %></h3>
            <% if @avg_bid_amount_change.present? %>
              <span class="ml-2 text-sm font-medium <%= @avg_bid_amount_change >= 0 ? 'text-green-500' : 'text-red-500' %>">
                <%= @avg_bid_amount_change >= 0 ? '+' : '' %><%= number_to_percentage(@avg_bid_amount_change.abs, precision: 1) %>
              </span>
            <% end %>
          </div>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Average winning bid amount</p>
        </div>
        <div class="p-2 rounded-full bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML ROI Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">ROI</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_percentage(@roi, precision: 1) %></h3>
          </div>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Return on investment</p>
        </div>
        <div class="p-2 rounded-full bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML Active Campaigns Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Active Campaigns</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= @campaigns.count %></h3>
          </div>
        </div>
        <div class="p-2 rounded-full bg-teal-100 dark:bg-teal-900 text-teal-600 dark:text-teal-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Direct HTML Total Profit Card -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Profit</p>
          <div class="flex items-baseline mt-1">
            <h3 class="text-2xl font-bold"><%= number_to_currency(@total_profit) %></h3>
          </div>
        </div>
        <div class="p-2 rounded-full bg-amber-100 dark:bg-amber-900 text-amber-600 dark:text-amber-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Charts Section -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-8">
    <!-- Main Performance Chart -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 xl:col-span-2">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium">Campaign Performance Trends</h3>
        
        <!-- Metric Selector -->
        <div class="flex items-center space-x-2">
          <span class="text-sm text-gray-500 dark:text-gray-400">Metrics:</span>
          <div class="flex flex-wrap gap-2">
            <button type="button" class="metric-toggle active px-2 py-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200" data-metric="total_bids">Leads</button>
            <button type="button" class="metric-toggle active px-2 py-1 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" data-metric="accepted_bids">Accepted</button>
            <button type="button" class="metric-toggle active px-2 py-1 text-xs rounded bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200" data-metric="total_revenue">Revenue</button>
            <button type="button" class="metric-toggle px-2 py-1 text-xs rounded bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200" data-metric="avg_bid_amount">Avg Bid</button>
          </div>
        </div>
      </div>
      <div class="h-96">
        <canvas id="performanceChart"></canvas>
      </div>
    </div>
    
    <!-- Volume and Acceptance Rate -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <h3 class="text-lg font-medium mb-4">Lead Volume & Acceptance Rate</h3>
      <div class="h-80">
        <canvas id="volumeChart"></canvas>
      </div>
    </div>
    
    <!-- Revenue and Profitability -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <h3 class="text-lg font-medium mb-4">Revenue & Profitability</h3>
      <div class="h-80">
        <canvas id="revenueChart"></canvas>
      </div>
    </div>
  </div>
  
  <!-- Tables Section - Top Performing Campaigns & Sources -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-8">
    <!-- Top Campaigns Table -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-medium">Top Performing Campaigns</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">Ranked by total revenue</p>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-900">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Campaign</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Leads</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Acceptance</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Revenue</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
            <% if @top_campaigns.any? %>
              <% @top_campaigns.each do |campaign| %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <%= link_to campaign[:name], campaign_path(campaign[:id]), class: "text-blue-600 dark:text-blue-400 hover:underline" %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_with_delimiter(campaign[:total_bids]) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_to_percentage(campaign[:acceptance_rate], precision: 1) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_to_currency(campaign[:total_revenue]) %></td>
                </tr>
              <% end %>
            <% else %>
              <tr>
                <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No campaign data available for the selected period</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
    
    <!-- Top Sources Table -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-medium">Top Sources</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">Ranked by lead volume</p>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-900">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Source</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Leads</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Acceptance</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Revenue</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
            <% if @top_sources.any? %>
              <% @top_sources.each do |source| %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <%= link_to source[:name], source_path(source[:id]), class: "text-blue-600 dark:text-blue-400 hover:underline" %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_with_delimiter(source[:total_bids]) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_to_percentage(source[:acceptance_rate], precision: 1) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm"><%= number_to_currency(source[:total_revenue]) %></td>
                </tr>
              <% end %>
            <% else %>
              <tr>
                <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No source data available for the selected period</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Chart.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
document.addEventListener('turbo:load', function() {
  // Filter panel toggle
  const filterToggleBtn = document.getElementById('filterToggleBtn');
  const filterPanel = document.getElementById('filterPanel');
  
  if (filterToggleBtn && filterPanel) {
    filterToggleBtn.addEventListener('click', function() {
      filterPanel.classList.toggle('hidden');
    });
  }
  
  // Custom date range toggling
  const datePresetSelect = document.querySelector('select[name="date_preset"]');
  const customDateRange = document.getElementById('customDateRange');
  
  if (datePresetSelect && customDateRange) {
    datePresetSelect.addEventListener('change', function() {
      if (this.value === 'custom') {
        customDateRange.classList.remove('hidden');
      } else {
        customDateRange.classList.add('hidden');
      }
    });
  }
  
  // Initialize charts
  initializeCharts();
  
  // Metric toggles for the main chart
  const metricToggles = document.querySelectorAll('.metric-toggle');
  if (metricToggles.length > 0) {
    metricToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        this.classList.toggle('active');
        this.classList.toggle('bg-gray-100');
        this.classList.toggle('text-gray-800');
        this.classList.toggle('dark:bg-gray-700');
        this.classList.toggle('dark:text-gray-200');
        
        const metric = this.getAttribute('data-metric');
        let activeColor;
        
        if (metric === 'total_bids') {
          activeColor = 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
        } else if (metric === 'accepted_bids') {
          activeColor = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
        } else if (metric === 'total_revenue') {
          activeColor = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
        } else if (metric === 'avg_bid_amount') {
          activeColor = 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';
        }
        
        if (this.classList.contains('active')) {
          this.className = `metric-toggle active px-2 py-1 text-xs rounded ${activeColor}`;
          window.performanceChart.show(metric);
        } else {
          window.performanceChart.hide(metric);
        }
        
        window.performanceChart.update();
      });
    });
  }
});

function initializeCharts() {
  // Set up Chart.js defaults
  Chart.defaults.font.family = "'Inter', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'sans-serif'";
  Chart.defaults.color = document.documentElement.classList.contains('dark') ? '#94a3b8' : '#64748b';
  
  // Parse data from Rails
  const timeSeriesData = <%= raw @time_series_data.to_json %>;
  
  // Main Performance Chart
  const performanceCtx = document.getElementById('performanceChart');
  if (performanceCtx) {
    window.performanceChart = new Chart(performanceCtx, {
      type: 'line',
      data: {
        labels: timeSeriesData.labels,
        datasets: [
          {
            label: 'Lead Volume',
            data: timeSeriesData.total_bids,
            borderColor: 'rgb(59, 130, 246)',
            backgroundColor: 'rgba(59, 130, 246, 0.2)',
            borderWidth: 2,
            yAxisID: 'y',
            tension: 0.3
          },
          {
            label: 'Accepted Leads',
            data: timeSeriesData.accepted_bids,
            borderColor: 'rgb(16, 185, 129)',
            backgroundColor: 'rgba(16, 185, 129, 0.2)',
            borderWidth: 2,
            yAxisID: 'y',
            tension: 0.3
          },
          {
            label: 'Revenue',
            data: timeSeriesData.total_revenue,
            borderColor: 'rgb(245, 158, 11)',
            backgroundColor: 'rgba(245, 158, 11, 0.2)',
            borderWidth: 2,
            yAxisID: 'y1',
            tension: 0.3
          },
          {
            label: 'Avg Bid Amount',
            data: timeSeriesData.avg_bid_amount,
            borderColor: 'rgb(139, 92, 246)',
            backgroundColor: 'rgba(139, 92, 246, 0.2)',
            borderWidth: 2,
            yAxisID: 'y1',
            tension: 0.3,
            hidden: true
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          mode: 'index',
          intersect: false
        },
        plugins: {
          legend: {
            position: 'top',
            labels: {
              usePointStyle: true
            }
          },
          tooltip: {
            usePointStyle: true,
            callbacks: {
              label: function(context) {
                let label = context.dataset.label || '';
                let value = context.parsed.y;
                
                if (label) {
                  label += ': ';
                }
                
                if (context.dataset.yAxisID === 'y1') {
                  label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
                } else {
                  label += new Intl.NumberFormat('en-US').format(value);
                }
                
                return label;
              }
            }
          }
        },
        scales: {
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            title: {
              display: true,
              text: 'Lead Count'
            },
            grid: {
              color: document.documentElement.classList.contains('dark') ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
            }
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            title: {
              display: true,
              text: 'Amount ($)'
            },
            grid: {
              drawOnChartArea: false
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  }
  
  // Volume and Acceptance Rate Chart
  const volumeCtx = document.getElementById('volumeChart');
  if (volumeCtx) {
    // Calculate acceptance rate percentage
    const acceptanceRateData = timeSeriesData.total_bids.map((value, index) => {
      if (value === 0) return 0;
      return (timeSeriesData.accepted_bids[index] / value * 100);
    });
    
    new Chart(volumeCtx, {
      type: 'bar',
      data: {
        labels: timeSeriesData.labels,
        datasets: [
          {
            label: 'Lead Volume',
            data: timeSeriesData.total_bids,
            backgroundColor: 'rgba(59, 130, 246, 0.8)',
            borderColor: 'rgb(59, 130, 246)',
            borderWidth: 1,
            yAxisID: 'y'
          },
          {
            label: 'Acceptance Rate (%)',
            data: acceptanceRateData,
            type: 'line',
            backgroundColor: 'rgba(16, 185, 129, 0.2)',
            borderColor: 'rgb(16, 185, 129)',
            borderWidth: 2,
            tension: 0.3,
            yAxisID: 'y1',
            pointRadius: 3
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          mode: 'index',
          intersect: false
        },
        plugins: {
          legend: {
            position: 'top'
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                let label = context.dataset.label || '';
                let value = context.parsed.y;
                
                if (label) {
                  label += ': ';
                }
                
                if (context.dataset.yAxisID === 'y1') {
                  label += value.toFixed(1) + '%';
                } else {
                  label += new Intl.NumberFormat('en-US').format(value);
                }
                
                return label;
              }
            }
          }
        },
        scales: {
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            title: {
              display: true,
              text: 'Lead Count'
            },
            beginAtZero: true,
            grid: {
              color: document.documentElement.classList.contains('dark') ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
            }
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            title: {
              display: true,
              text: 'Acceptance Rate (%)'
            },
            beginAtZero: true,
            max: 100,
            grid: {
              drawOnChartArea: false
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  }
  
  // Revenue and Profitability Chart
  const revenueCtx = document.getElementById('revenueChart');
  if (revenueCtx) {
    // Calculate profit (assuming 70% margin for demo)
    const profitData = timeSeriesData.total_revenue.map(value => value * 0.7);
    const costData = timeSeriesData.total_revenue.map(value => value * 0.3);
    
    new Chart(revenueCtx, {
      type: 'bar',
      data: {
        labels: timeSeriesData.labels,
        datasets: [
          {
            label: 'Revenue',
            data: timeSeriesData.total_revenue,
            backgroundColor: 'rgba(245, 158, 11, 0.8)',
            borderColor: 'rgb(245, 158, 11)',
            borderWidth: 1,
            stack: 'Stack 0'
          },
          {
            label: 'Profit',
            data: profitData,
            backgroundColor: 'rgba(16, 185, 129, 0.8)',
            borderColor: 'rgb(16, 185, 129)',
            borderWidth: 1,
            stack: 'Stack 1'
          },
          {
            label: 'Cost',
            data: costData,
            backgroundColor: 'rgba(239, 68, 68, 0.8)',
            borderColor: 'rgb(239, 68, 68)',
            borderWidth: 1,
            stack: 'Stack 1'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top'
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                let label = context.dataset.label || '';
                let value = context.parsed.y;
                
                if (label) {
                  label += ': ';
                }
                
                label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
                
                return label;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: document.documentElement.classList.contains('dark') ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
            },
            ticks: {
              callback: function(value) {
                return '$' + value;
              }
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  }
}
</script>