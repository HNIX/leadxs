<% content_for :title, "Buyer Analysis: #{@distribution.name}" %>
<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<% end %>

<% 
  breadcrumbs = [
    { title: "Home", path: root_path },
    { title: "Bidding", path: bid_dashboard_path },
    { title: "Buyers", path: reports_buyers_path },
    { title: @distribution.name, active: true }
  ]
  
  content_for :breadcrumbs do
    render partial: "shared/breadcrumbs", locals: { breadcrumbs: breadcrumbs }
  end
%>

<div class="container mx-auto px-4 py-8">
  <div class="mb-6">
    <div class="flex justify-between items-center mb-4">
      <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white"><%= @distribution.name %> Performance</h1>
        <p class="text-gray-600 dark:text-gray-400">Company: <%= @distribution.company.name %></p>
      </div>
      
      <div class="flex gap-2">
        <%= link_to reports_buyers_path, class: "inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600" do %>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to All Buyers
        <% end %>

        <%= form_with url: reports_buyer_path(@distribution), method: :get, data: { turbo_frame: "_top" }, class: "inline-flex" do |f| %>
          <%= f.select :period_type, 
                      options_for_select([
                        ["Hourly", "hourly"],
                        ["Daily", "daily"],
                        ["Weekly", "weekly"],
                        ["Monthly", "monthly"]
                      ], @period_type),
                      {}, 
                      { class: "ml-2 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md",
                        onchange: "this.form.submit();" } %>
        <% end %>
      </div>
    </div>
    
    <!-- Key Metrics Section -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Bids Placed</h3>
        <p class="text-3xl font-bold text-gray-900 dark:text-white"><%= number_with_delimiter(@buyer_metrics[:bids_placed]) %></p>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">During selected time period</p>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Win Rate</h3>
        <p class="text-3xl font-bold text-gray-900 dark:text-white"><%= number_to_percentage(@buyer_metrics[:win_rate], precision: 1) %></p>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1"><%= @buyer_metrics[:accepted_bids] %> won of <%= @buyer_metrics[:bids_placed] %> total</p>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Avg. Bid Amount</h3>
        <p class="text-3xl font-bold text-gray-900 dark:text-white"><%= number_to_currency(@buyer_metrics[:avg_bid_amount]) %></p>
        <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mt-1">
          <span>Min: <%= number_to_currency(@buyer_metrics[:min_bid_amount]) %></span>
          <span>Max: <%= number_to_currency(@buyer_metrics[:max_bid_amount]) %></span>
        </div>
      </div>
    </div>
    
    <!-- Financial & Performance Metrics -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Total Spend</h3>
        <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_to_currency(@buyer_metrics[:total_spend]) %></p>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Response Time</h3>
        <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= @buyer_metrics[:avg_response_time] ? "#{@buyer_metrics[:avg_response_time]} sec" : "N/A" %></p>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Bidding Frequency</h3>
        <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= @buyer_metrics[:bids_per_hour] %> bids/hour</p>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase mb-1">Rejection Rate</h3>
        <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_to_percentage(@buyer_metrics[:rejection_rate], precision: 1) %></p>
      </div>
    </div>
    
    <!-- Bid Status Breakdown -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Bid Status Breakdown</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div>
          <div class="flex items-center">
            <span class="h-3 w-3 rounded-full bg-green-500 dark:bg-green-600 mr-2"></span>
            <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Accepted</h4>
          </div>
          <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1"><%= number_with_delimiter(@buyer_metrics[:accepted_bids]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= number_to_percentage(@buyer_metrics[:win_rate], precision: 1) %> of total</p>
        </div>
        
        <div>
          <div class="flex items-center">
            <span class="h-3 w-3 rounded-full bg-red-500 dark:bg-red-600 mr-2"></span>
            <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Rejected</h4>
          </div>
          <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1"><%= number_with_delimiter(@buyer_metrics[:rejected_bids]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= number_to_percentage(@buyer_metrics[:rejection_rate], precision: 1) %> of total</p>
        </div>
        
        <div>
          <div class="flex items-center">
            <span class="h-3 w-3 rounded-full bg-yellow-500 dark:bg-yellow-600 mr-2"></span>
            <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Expired</h4>
          </div>
          <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1"><%= number_with_delimiter(@buyer_metrics[:expired_bids]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= number_to_percentage(@buyer_metrics[:expiration_rate], precision: 1) %> of total</p>
        </div>
        
        <div>
          <div class="flex items-center">
            <span class="h-3 w-3 rounded-full bg-gray-500 dark:bg-gray-600 mr-2"></span>
            <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Error</h4>
          </div>
          <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1"><%= number_with_delimiter(@buyer_metrics[:error_bids]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= number_to_percentage(@buyer_metrics[:error_rate], precision: 1) %> of total</p>
        </div>
      </div>
      
      <div class="mt-6">
        <canvas id="bidStatusChart" height="200"></canvas>
      </div>
    </div>
    
    <!-- Bid Time Distribution -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Bid Time Distribution</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-4">
        <div>
          <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Morning (6AM-12PM)</h4>
          <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_with_delimiter(@buyer_metrics[:bid_time_distribution][:morning]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= (@buyer_metrics[:bid_time_distribution][:morning].to_f / @buyer_metrics[:bids_placed] * 100).round(1) %>% of bids</p>
        </div>
        
        <div>
          <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Afternoon (12PM-6PM)</h4>
          <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_with_delimiter(@buyer_metrics[:bid_time_distribution][:afternoon]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= (@buyer_metrics[:bid_time_distribution][:afternoon].to_f / @buyer_metrics[:bids_placed] * 100).round(1) %>% of bids</p>
        </div>
        
        <div>
          <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Evening (6PM-12AM)</h4>
          <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_with_delimiter(@buyer_metrics[:bid_time_distribution][:evening]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= (@buyer_metrics[:bid_time_distribution][:evening].to_f / @buyer_metrics[:bids_placed] * 100).round(1) %>% of bids</p>
        </div>
        
        <div>
          <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">Night (12AM-6AM)</h4>
          <p class="text-2xl font-bold text-gray-900 dark:text-white"><%= number_with_delimiter(@buyer_metrics[:bid_time_distribution][:night]) %></p>
          <p class="text-sm text-gray-600 dark:text-gray-400"><%= (@buyer_metrics[:bid_time_distribution][:night].to_f / @buyer_metrics[:bids_placed] * 100).round(1) %>% of bids</p>
        </div>
      </div>
      
      <div>
        <canvas id="timeDistributionChart" height="200"></canvas>
      </div>
    </div>
    
    <!-- Performance Over Time -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Performance Over Time</h3>
        <div class="flex gap-2">
          <button class="time-chart-toggle px-3 py-1 text-sm rounded-md bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 font-medium" data-chart="bids">Bids</button>
          <button class="time-chart-toggle px-3 py-1 text-sm rounded-md bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-indigo-100 hover:text-indigo-800 dark:hover:bg-indigo-900 dark:hover:text-indigo-200 font-medium" data-chart="win_rate">Win Rate</button>
          <button class="time-chart-toggle px-3 py-1 text-sm rounded-md bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-indigo-100 hover:text-indigo-800 dark:hover:bg-indigo-900 dark:hover:text-indigo-200 font-medium" data-chart="avg_amount">Bid Amount</button>
          <button class="time-chart-toggle px-3 py-1 text-sm rounded-md bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-indigo-100 hover:text-indigo-800 dark:hover:bg-indigo-900 dark:hover:text-indigo-200 font-medium" data-chart="response_time">Response Time</button>
        </div>
      </div>
      
      <div class="chart-container" style="height: 300px;">
        <canvas id="timeSeriesChart"></canvas>
      </div>
    </div>
    
    <!-- Campaign Engagement -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Campaign Engagement</h3>
      </div>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Campaign</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Bids Placed</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Win Rate</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Avg. Bid Amount</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Total Spend</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Avg Response Time</th>
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            <% if @campaign_metrics.present? %>
              <% @campaign_metrics.each do |campaign| %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                    <%= link_to campaign[:name], campaign_path(campaign[:id]), class: "text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300" %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"><%= number_with_delimiter(campaign[:bids_placed]) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"><%= number_to_percentage(campaign[:win_rate], precision: 1) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"><%= number_to_currency(campaign[:avg_bid_amount]) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"><%= number_to_currency(campaign[:total_spend]) %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"><%= campaign[:avg_response_time] ? "#{campaign[:avg_response_time]} sec" : "N/A" %></td>
                </tr>
              <% end %>
            <% else %>
              <tr>
                <td colspan="6" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center italic">No campaign engagement data available</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbo:load', function() {
    // Check if dark mode is active
    const isDarkMode = document.documentElement.classList.contains('dark');
    
    // Bid Status Pie Chart
    const statusCtx = document.getElementById('bidStatusChart').getContext('2d');
    new Chart(statusCtx, {
      type: 'pie',
      data: {
        labels: ['Accepted', 'Rejected', 'Expired', 'Error'],
        datasets: [{
          data: [
            <%= @buyer_metrics[:accepted_bids] %>,
            <%= @buyer_metrics[:rejected_bids] %>,
            <%= @buyer_metrics[:expired_bids] %>,
            <%= @buyer_metrics[:error_bids] %>
          ],
          backgroundColor: [
            isDarkMode ? 'rgba(34, 197, 94, 0.7)' : 'rgba(34, 197, 94, 0.6)',  // green
            isDarkMode ? 'rgba(239, 68, 68, 0.7)' : 'rgba(239, 68, 68, 0.6)',  // red
            isDarkMode ? 'rgba(234, 179, 8, 0.7)' : 'rgba(234, 179, 8, 0.6)',  // yellow
            isDarkMode ? 'rgba(107, 114, 128, 0.7)' : 'rgba(107, 114, 128, 0.6)'  // gray
          ],
          borderColor: [
            isDarkMode ? 'rgb(22, 163, 74)' : 'rgb(34, 197, 94)',
            isDarkMode ? 'rgb(220, 38, 38)' : 'rgb(239, 68, 68)',
            isDarkMode ? 'rgb(202, 138, 4)' : 'rgb(234, 179, 8)',
            isDarkMode ? 'rgb(75, 85, 99)' : 'rgb(107, 114, 128)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              color: isDarkMode ? '#e5e7eb' : '#374151'
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const value = context.raw;
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = Math.round((value / total) * 100);
                return `${context.label}: ${value} (${percentage}%)`;
              }
            },
            backgroundColor: isDarkMode ? 'rgba(55, 65, 81, 0.9)' : 'rgba(255, 255, 255, 0.9)',
            titleColor: isDarkMode ? '#e5e7eb' : '#111827',
            bodyColor: isDarkMode ? '#e5e7eb' : '#374151',
            borderColor: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)',
            borderWidth: 1
          }
        }
      }
    });
    
    // Time Distribution Chart
    const timeDistCtx = document.getElementById('timeDistributionChart').getContext('2d');
    new Chart(timeDistCtx, {
      type: 'bar',
      data: {
        labels: ['Morning (6AM-12PM)', 'Afternoon (12PM-6PM)', 'Evening (6PM-12AM)', 'Night (12AM-6AM)'],
        datasets: [{
          label: 'Bids',
          data: [
            <%= @buyer_metrics[:bid_time_distribution][:morning] %>,
            <%= @buyer_metrics[:bid_time_distribution][:afternoon] %>,
            <%= @buyer_metrics[:bid_time_distribution][:evening] %>,
            <%= @buyer_metrics[:bid_time_distribution][:night] %>
          ],
          backgroundColor: isDarkMode ? 'rgba(129, 140, 248, 0.6)' : 'rgba(79, 70, 229, 0.6)',
          borderColor: isDarkMode ? 'rgb(129, 140, 248)' : 'rgb(79, 70, 229)',
          borderWidth: 1
        }]
      },
      options: {
        indexAxis: 'y',
        responsive: true,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: isDarkMode ? 'rgba(55, 65, 81, 0.9)' : 'rgba(255, 255, 255, 0.9)',
            titleColor: isDarkMode ? '#e5e7eb' : '#111827',
            bodyColor: isDarkMode ? '#e5e7eb' : '#374151',
            borderColor: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)',
            borderWidth: 1
          }
        },
        scales: {
          y: {
            ticks: {
              color: isDarkMode ? '#d1d5db' : '#6b7280'
            },
            grid: {
              color: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
            }
          },
          x: {
            ticks: {
              color: isDarkMode ? '#d1d5db' : '#6b7280'
            },
            grid: {
              color: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
            }
          }
        }
      }
    });
    
    // Time Series Chart
    const timeCtx = document.getElementById('timeSeriesChart').getContext('2d');
    let timeSeriesChart = null;
    
    // Chart data from controller
    const timeSeriesData = <%= raw @time_series_data.to_json %>;
    
    // Function to create/update time series chart
    function updateTimeSeriesChart(dataType) {
      // Clear previous chart if it exists
      if (timeSeriesChart) {
        timeSeriesChart.destroy();
      }
      
      // Update active button state
      document.querySelectorAll('.time-chart-toggle').forEach(button => {
        if (button.dataset.chart === dataType) {
          button.classList.add(isDarkMode ? 'bg-indigo-900' : 'bg-indigo-100');
          button.classList.add(isDarkMode ? 'text-indigo-200' : 'text-indigo-800');
          button.classList.remove(isDarkMode ? 'bg-gray-700' : 'bg-gray-100');
          button.classList.remove(isDarkMode ? 'text-gray-300' : 'text-gray-600');
        } else {
          button.classList.remove(isDarkMode ? 'bg-indigo-900' : 'bg-indigo-100');
          button.classList.remove(isDarkMode ? 'text-indigo-200' : 'text-indigo-800');
          button.classList.add(isDarkMode ? 'bg-gray-700' : 'bg-gray-100');
          button.classList.add(isDarkMode ? 'text-gray-300' : 'text-gray-600');
        }
      });
      
      // Configure chart based on data type
      let chartConfig = {
        type: 'line',
        data: {
          labels: timeSeriesData.labels,
          datasets: [{
            label: getTimeChartLabel(dataType),
            data: timeSeriesData[dataType],
            borderColor: isDarkMode ? 'rgb(129, 140, 248)' : 'rgb(79, 70, 229)',
            backgroundColor: isDarkMode ? 'rgba(129, 140, 248, 0.2)' : 'rgba(79, 70, 229, 0.2)',
            fill: true,
            tension: 0.1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
              labels: {
                color: isDarkMode ? '#e5e7eb' : '#374151'
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let value = context.raw;
                  return formatTimeValue(value, dataType);
                }
              },
              backgroundColor: isDarkMode ? 'rgba(55, 65, 81, 0.9)' : 'rgba(255, 255, 255, 0.9)',
              titleColor: isDarkMode ? '#e5e7eb' : '#111827',
              bodyColor: isDarkMode ? '#e5e7eb' : '#374151',
              borderColor: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)',
              borderWidth: 1
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: isDarkMode ? '#d1d5db' : '#6b7280',
                callback: function(value) {
                  return formatTimeValue(value, dataType, true);
                }
              },
              grid: {
                color: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
              }
            },
            x: {
              ticks: {
                color: isDarkMode ? '#d1d5db' : '#6b7280'
              },
              grid: {
                color: isDarkMode ? 'rgba(75, 85, 99, 0.2)' : 'rgba(209, 213, 219, 0.5)'
              }
            }
          }
        }
      };
      
      // Create new chart
      timeSeriesChart = new Chart(timeCtx, chartConfig);
    }
    
    // Format values based on data type
    function formatTimeValue(value, dataType, isAxis = false) {
      switch(dataType) {
        case 'bids':
          return value.toLocaleString();
        case 'win_rate':
          return value.toFixed(1) + '%';
        case 'avg_amount':
          return '$' + value.toFixed(2);
        case 'response_time':
          return value.toFixed(2) + ' sec';
        default:
          return value;
      }
    }
    
    // Get chart label based on data type
    function getTimeChartLabel(dataType) {
      switch(dataType) {
        case 'bids':
          return 'Number of Bids';
        case 'win_rate':
          return 'Win Rate (%)';
        case 'avg_amount':
          return 'Average Bid Amount';
        case 'response_time':
          return 'Avg Response Time (sec)';
        default:
          return dataType;
      }
    }
    
    // Initialize chart with bids data
    updateTimeSeriesChart('bids');
    
    // Add event listeners for toggling charts
    document.querySelectorAll('.time-chart-toggle').forEach(button => {
      button.addEventListener('click', function() {
        updateTimeSeriesChart(this.dataset.chart);
      });
    });
  });
</script>